{"version":3,"sources":["serviceWorker.ts","env/index.ts","common/config.ts","redux/user.redux.ts","redux/rootReducer.ts","components/dashBoard/NavlinkBar.tsx","utils/utils.ts","components/common/Back.tsx","components/common/CopyText.tsx","components/common/ScrollToTop.tsx","components/dashBoard/Dashboard.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","env","CLOUD_SERVICE","urlParams","search","substring","split","map","p","forEach","_SYS_CHANNEL","ua","navigator","userAgent","toLowerCase","indexOf","Config","ENV","SYS_CHANNEL","BAIDU_MAP_AK","TEST_USER","memberId","token","USER","initState","user","combineReducers","state","arguments","length","undefined","action","type","update","$set","payload","NavLinkBar","timer","handleOnPress","path","title","_this","props","history","push","prevProps","_this2","this","_this$props","navList","pathname","NavLinkBarComponent","react_default","a","createElement","className","tab_bar_default","tabBarPosition","prerenderingSiblingsNumber","Infinity","nav","Item","key","icon","concat","selectedIcon","selected","onPress","defaultComponent","react_router","to","Component","withRouter","connect","dispatch","actions","bindActionCreators","devicePixelRatio","copyText","ele","range","document","createRange","selectNode","selection","getSelection","rangeCount","removeAllRanges","addRange","execCommand","screenHeight","body","offsetHeight","Back","top","goBack","replace","startY","endY","onTouchStart","e","changedTouches","clientY","onTouchMove","touchY","setState","onClick","style","PureComponent","ScrollToTop","scrollTo","querySelector","Home","React","lazy","__webpack_require__","then","bind","News","User","Dashboard","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","text","component","isCache","isTab","find","isNoBack","some","item","includes","react","fallback","react_router_cache_route","react_router_cache_route_default","render","NavlinkBar","common_Back","isDebug","href","platform","VConsole","require","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","es","react_router_dom","common_ScrollToTop","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7e24e229.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ninterface Config {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register (config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","export default {\n  env: 'dev',\n  CLOUD_SERVICE: `https://www.fastmock.site/`\n}\n","\nconst urlParams: {\n  [key: string]: string;\n} = {}\nwindow.location.search.substring(1).split(/&/).map((p) => p.split('=')).forEach((p) => { urlParams[p[0]] = p[1] })\n// wechat alipay h5\nconst _SYS_CHANNEL = (function () {\n  const ua = window.navigator.userAgent.toLowerCase()\n  return ~ua.indexOf('micromessenger') ? 'wechat' : ~ua.indexOf('alipayclient') ? 'alipay' : 'h5'\n})()\nconst BRANDID = urlParams['brandId']\nexport default class Config {\n  /** 开发环境 */\n  static readonly ENV = 'dev'\n  /** 当前环境 */\n  static readonly SYS_CHANNEL = _SYS_CHANNEL\n  /** 百度地图AK密钥 */\n  static readonly BAIDU_MAP_AK = '84oWCrEPVUDk1Ge6RaGzRzb57wki7MwY'\n\n  /** 默认的测试数据 */\n  static readonly TEST_USER = {\n    memberId: '3356545', // 3061942\n    token: 'eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJicmFuZElkIjoiMTAwMDE5Iiwic3RvcmVJZCI6IjMzMDAxOSIsImlhdCI6MTU2MTU0MTEwMSwiZXhwIjoyNDI1NTQxMTAxfQ.NXL3gWPwrwXnkB8KrRL5xxQ7TFGcBeJtTxTeTiLUgzd76d8RauHbk2-anti4QIZUzYEE82ZasMFz3ac9jbL7V3K5NM-ufs8kOgLU4IJn1VXkSGP0MGJDdyr-dUkSM3ytfC60Hc0f5TiKaFWphTTP-FI0lnKXOPv13W-0Rom0_8g'\n  }\n}\n","import { Dispatch } from 'redux'\nimport update from 'immutability-helper'\nimport localStore from 'store'\n\n// types\nconst ADDRESSES = 'ADDRESSES'\nconst USER = 'USER'\n\n// interface\ninterface IUserInitState {\n  user: any;\n}\n// state\nconst initState: IUserInitState = {\n  user: {}\n}\n\n// function setAddress (addresses: IAddress[]) {\n//   return {\n//     type: ADDRESSES,\n//     payload: addresses\n//   }\n// }\n\n// 获取用户信息\nexport function getAddress (token: string) {\n  return async (dispatch: Dispatch) => {\n    // let res: any = await AddressAPI.getAddress(token)\n    // res = res.data.result && res.data.result.data\n    // const defaultAddress = res.find((address: IAddress) => {\n    //   return address.isDefault\n    // })\n    // // 将地址根据修改时间排序\n    // const sortAddresses = _sortBy(res, (address) => {\n    //   return -address.modified\n    // })\n    // dispatch(setAddress(sortAddresses))\n    // return {\n    //   addresses: sortAddresses, // 所有地址\n    //   defaultAddress // 默认地址\n    // }\n  }\n}\n\n// reducer\nexport function user (state = initState, action: { type: string; payload: any }) {\n  switch (action.type) {\n    case USER: {\n      return update(state, {\n        user: {\n          $set: action.payload\n        }\n      })\n    }\n    default:\n      return state\n  }\n}\n","\nimport { combineReducers } from 'redux'\nimport { user } from '@redux/user.redux'\nexport default combineReducers({\n  user\n})\n","\nimport React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators, Dispatch } from 'redux'\nimport { TabBar } from 'antd-mobile'\nimport { withRouter, RouteComponentProps, Redirect } from 'react-router-dom'\n\n// interface\ninterface INavList{\n  path: string;\n  text: string;\n  icon: string;\n  title: string;\n  component: any;\n}\ninterface IActions{\n}\ninterface IProps {\n  actions: IActions;\n  location: RouteComponentProps['location'];\n  history: RouteComponentProps['history'];\n  navList: INavList[];\n}\n\nclass NavLinkBar extends Component<RouteComponentProps & IProps> {\n  private timer: any;\n  handleOnPress = (path: string, title: string) => {\n    const { history } = this.props\n    history.push(path)\n  }\n  componentDidUpdate (prevProps: IProps) {\n  }\n  componentWillUnmount () {\n  }\n  render () {\n    const { navList, location } = this.props\n    const { pathname } = location\n    const NavLinkBarComponent = (\n      <div className='bottom-navlink-bar'>\n        <TabBar\n          tabBarPosition='bottom'\n          prerenderingSiblingsNumber={Infinity}\n        >\n          {navList.map(nav => (\n            <TabBar.Item\n              key={nav.path}\n              icon={\n                <i className={`iconfont icon-${nav.icon} nav-tab`} />\n              }\n              selectedIcon={\n                <i className={`iconfont icon-${nav.icon} nav-tab`} />\n              }\n              selected={pathname === nav.path}\n              onPress={() => this.handleOnPress(nav.path, nav.title)}\n            >\n            </TabBar.Item>\n          ))}\n        </TabBar>\n      </div>\n    )\n    const defaultComponent = <Redirect to='/home' />\n    return pathname === '/' ? defaultComponent : NavLinkBarComponent\n  }\n}\n\n// connect\nconst mapStateToProps = (state: any) => {\n  return {\n  }\n}\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return {\n    actions: bindActionCreators({}, dispatch)\n  }\n}\nexport default withRouter(connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(NavLinkBar))\n","import pageName from '@common/pageName'\n\nexport const devicePixelRatio = window.devicePixelRatio\n/**\n * 设置页面的标题\n * @param {string} title - 页面的标题\n */\nexport function setPageName ({ name, pageKey = 'HOME' }: { name?: string; pageKey?: string } = {}) {\n  document.title = name || pageName[pageKey]\n}\n/** 获取当前系统信息 */\nexport function getPlatform () {\n  const ua = navigator.userAgent.toLowerCase()\n  const sysPlatform = navigator.platform.toLowerCase()\n  const isIpad = ua.includes('ipad')\n  const isAndroid = ua.includes('android')\n  const isIOS = ua.includes('iphone os')\n  const isIphoneX = isIOS && (screen.height >= 812 && screen.width >= 375)\n  // console.log('isIphoneX', isIphoneX, screen.height, screen.width, navigator.userAgent)\n  const isWeixin = ua.includes('micromessenger')\n  const isMiniProgram = isWeixin && ua.includes('miniprogram') || window.__wxjs_environment === 'miniprogram'\n  const isWeixinBrower = isWeixin && window.__wxjs_environment === 'browser' && !isMiniProgram\n  const isComputerBrower = sysPlatform.includes('win') || sysPlatform.includes('mac')\n  return {\n    isAndroid,\n    isIOS,\n    isPhone: isAndroid || isIOS,\n    isIpad,\n    isIphoneX,\n    isWeixin, // 微信环境\n    isMiniProgram, // 小程序环境\n    isWeixinBrower, // 微信浏览器环境（android下无法判断）\n    isComputerBrower // 电脑浏览器\n  }\n}\n/**\n * 格式化时间\n *\n * @static\n * @param {Date} [date = new Date()] - 时间对象\n * @param {Date} [dateSeparator = '/'] - 日期分隔符\n * @param {String} [timeSeparator = ':'] - 时间分隔符\n * @param {String} [type = 'en'] - 中式时间/英式时间\n * @param {Boolean} [week = false] - 是否显示星期周几\n * @param {Boolean} [meridiem = false] - 是否显示上下午\n * @param {Number} [day = 0] - 当前天数的增减量\n * @param {Number} [hour = 0] - 当前小时的增减量\n * @param {Number} [minutes = 0] - 当前分钟的增减量\n * @param {Number} [second = 0] - 当前秒钟的增减量\n * @param {boolean} [showDate = true] - 是否显示日期\n * @param {boolean} [showTime = true] - 是否显示时分秒\n * @returns {String}\n * @memberof Utils\n */\ninterface IFormatTime{\n  date?: number;\n  dateSeparator?: string;\n  timeSeparator?: string;\n  type?: string;\n  week?: boolean;\n  meridiem?: boolean;\n  day?: number;\n  hour?: number;\n  minutes?: number;\n  second?: number;\n  showDate?: boolean;\n  showTime?: boolean;\n}\nexport const formatTime = ({ date = Date.now(), dateSeparator = '/', timeSeparator = ':', type = 'en', week = false, meridiem = false, day = 0, hour = 0, minutes = 0, second = 0, showDate = true, showTime = true }: IFormatTime = {}) => {\n  const newDate = new Date(date + (day * 24 * 3600 + hour * 3600 + minutes * 60 + second) * 1000)\n  const [weekDayCn, weekDayEn] = [['日', '一', '二', '三', '四', '五', '六'], ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']]\n  let [y, M, d, w, h, m, s]: any[] = [newDate.getFullYear(), newDate.getMonth() + 1, newDate.getDate(), newDate.getDay(), newDate.getHours(), newDate.getMinutes(), newDate.getSeconds()]\n  M < 10 && (M = '0' + M) // 月\n  d < 10 && (d = '0' + d) // 日\n  // h > 12 && (h = h - 12) // 小时\n  h < 10 && (h = '0' + h)\n  m < 10 && (m = '0' + m) // 分\n  s < 10 && (s = '0' + s) // 秒\n  return type === 'en'\n    ? [showDate ? [y, M, d].join(dateSeparator) : '', week ? `${weekDayEn[w]}` : '', meridiem ? `${h < 12 ? 'am' : 'pm'}` : '', showTime ? [h, m, s].join(timeSeparator) : ''].filter(val => val !== '').join(' ')\n    : showDate && type === 'cn' ? [y + '年' + M + '月' + d + '日', week ? `星期${weekDayCn[w]}` : '', meridiem ? `${h < 12 ? '上午' : '下午'}` : '', showTime ? [h, m, s].join(timeSeparator) : ''].filter(val => val !== '').join(' ')\n      : [showDate ? [y, M, d].join(dateSeparator) : '', [h, m, s].join(timeSeparator)].join(' ')\n}\n/**\n * url添加参数\n * @param {string} url - 需要添加参数的url\n * @param {object} params - 添加的参数，参数是'key:value'形式\n * @param {boolean} [isEncode=false] - 传入的url是否被编码过\n * @param {boolean} [needEncode=false] - 返回的url是否需要编码\n */\nexport const addParams = ({ url = '', params = {}, isEncode = false, needEncode = false }: { url: string; params: any; isEncode?: boolean; needEncode?: boolean }) => {\n  url = isEncode ? decodeURIComponent(url) : url\n  if (url.indexOf('?') > -1) {\n    let oldParams: any = {}\n    url.split('?')[1].split('&').forEach(val => {\n      let newVal = val.split('=')\n      oldParams[newVal[0]] = newVal[1]\n    })\n    // 合并、去重参数\n    params = { ...oldParams, ...params }\n  }\n  let [paramsStr, i] = ['', 1]\n  for (let [key, val] of Object.entries(params)) {\n    paramsStr += i > 1 ? `&${key}=${val}` : `${key}=${val}`\n    i++\n  }\n  const newUrl = `${url.split('?')[0]}?${paramsStr}`\n  return needEncode ? encodeURIComponent(newUrl) : newUrl\n}\n/**\n * url参数查询\n * @static\n * @param {String} url - url地址\n * @param {String} query - 查询参数\n */\nexport const getParams = ({ url = location.href, query }: { url?: string; query?: string } = {}) => {\n  const paramStr = url.split('?')[1]\n  const paramArr = paramStr && paramStr.split('&') || []\n  const params: any = {}\n  paramArr.forEach((param) => {\n    const paramData = param.split('=')\n    params[paramData[0]] = paramData[1]\n  })\n  return query ? params[query] : params\n}\n\n/**\n * 获取图片的后缀\n * @param {stirng} type - 图片size大小：big/small/original\n */\nconst _getImgSuffix = function (type: string) {\n  switch (type) {\n    case 'big':\n      return '@!exdetail'\n    case 'small':\n      return '@!expackagelist' // @!expackagelist和@!exproductlist一样\n    case 'original':\n      return ''\n    default:\n      return ''\n  }\n}\n/**\n * 获取图片路径\n * @desc \b\b\b大图在路径后面加上：@!exdetail；小图：@!expackagelist；原图：不加后缀\n * @param {string} [url=defaultBigImg] - 原始图片url\n * @param {string} [type='big'] - 图片类型：大图：big；小图：small；原图：original\n */\nexport const getImgUrl = function ({ url, type = 'big' }: { url: string; type?: string }) {\n  const suffix = _getImgSuffix(type)\n  return url ? url + suffix : window.Config.defaultImg[type]\n}\n/**\n * 获取图片路径\n * @desc \b\b\b大图在路径后面加上：@!exdetail；小图：@!expackagelist；原图：不加后缀\n * @desc 对于浩哥提供的图片服务：图片规则如下\n * @desc 取封面图：`${window.ENV.ESPROXY}productimage?pid=B${brandId}I${id}&type=videoInfo.poster&style=@!exproductlist`\n * @desc 取详情图（已废弃）：`${window.ENV.ESPROXY}productimage?pid=B${brandId}I${id}&style=@!exproductlist`\n * @param {string} brandId - 品牌id\n * @param {string} id - 商品的id\n * @param {string} [source='videoInfo.poster'] - 图片数据来源，目前支持：取ES的ebos中products表的poster字段如：type=videoInfo.poster；也可不传取picInfo中的images，不过商城中这个废弃\n * @param {string} [type='small'] type - 图片类型：大图：big；小图：small；原图：original\n */\nexport const getImgUrlBySource = function ({ brandId, id, source = 'videoInfo.poster', type = 'small' }: { brandId?: string; id?: string; source?: string; type?: string } = {}) {\n  source = source ? `&type=${source}` : ''\n  const baseUrl = id ? `${window.ENV.ESPROXY}productimage?pid=B${brandId}I${id}${source}` : window.Config.defaultImg.small\n  const suffix = _getImgSuffix(type)\n  return `${baseUrl}&style=${suffix}`\n}\n\n/**\n * 获取订单编号\n * @param {number} orderTime - 下单时间\n * @param {number} nono - 订单序号\n */\nexport const getOrderNo = function (orderTime: number, nono: number | string = '') {\n  // const time = moment(orderTime).format('YYYY-MM-DD').split('-').join('')\n  const time = formatTime({\n    date: orderTime,\n    showTime: false,\n    dateSeparator: ''\n  })\n  const no = String(nono).padStart(5, '0')\n  return time + no\n}\n/**\n * 随机色\n *\n * @param {Number} opacity - 透明度\n * @param {String} opacityType - 透明度是否随机\n */\nexport const getColor = function ({ opacity = 1, randomOpa = false } = {}) {\n  let randomColor = []\n  for (let i = 0; i < 3; i++) {\n    randomColor[i] = Math.floor(Math.random() * 256)\n  }\n  opacity = randomOpa ? Math.random() : 1\n  return `rgba(${randomColor[0]},${randomColor[1]},${randomColor[2]},${opacity})`\n}\n/**\n * 返回顶部\n */\nexport const scrollTo = ({ selector = '.dashboard-content', toScrollTop = 0, animation = true, extra = -15, increment = 20 }: { selector?: any; toScrollTop?: number; animation?: boolean; extra?: number; increment?: number} = {}) => {\n  const ele = document.querySelector(selector)\n  if (!ele) return\n  // 元素初始滚动距离\n  let startScrollTop = ele.scrollTop\n  if (animation) {\n    toScrollTop += extra\n    increment = startScrollTop > toScrollTop ? -increment : increment\n    let timer = setInterval(() => {\n      startScrollTop += increment\n      if (increment < 0) {\n        startScrollTop >= toScrollTop && (ele.scrollTop = startScrollTop)\n        if (startScrollTop < toScrollTop) {\n          clearInterval(timer)\n          timer = null\n        }\n      } else {\n        startScrollTop <= toScrollTop && (ele.scrollTop = startScrollTop)\n        if (startScrollTop > toScrollTop) {\n          clearInterval(timer)\n          timer = null\n        }\n      }\n    }, 0)\n  } else {\n    ele.scrollTop = toScrollTop\n  }\n}\n/**\n * 滚动到制定元素\n */\nexport const scrollToEle = ({ selector, offsetTop, extra = 0 }: { selector: any; offsetTop: number; extra?: number}) => {\n  const ele = document.querySelector(selector)\n  if (!ele) return\n  let scrollTop = ele.scrollTop\n  offsetTop = offsetTop - extra\n  let timer = setInterval(() => {\n    if (offsetTop > scrollTop) {\n      scrollTop += 10\n      scrollTop <= offsetTop && (ele.scrollTop = scrollTop)\n      if (scrollTop > offsetTop) {\n        clearInterval(timer)\n        timer = null\n      }\n    } else {\n      scrollTop -= 10\n      scrollTop >= offsetTop && (ele.scrollTop = scrollTop)\n      if (scrollTop < offsetTop) {\n        clearInterval(timer)\n        timer = null\n      }\n    }\n  }, 0)\n}\n/**\n * 获得滚动距离\n */\nexport const getscrollTop = (selector: string = '.dashboard-content') => {\n  const dashboardContent = document.querySelector(selector)\n  if (!dashboardContent) return 0\n  return dashboardContent.scrollTop\n}\n/**\n * 设置body是否可滚动\n */\nexport const preventBodyScroll = (unScroll: boolean) => {\n  const htmlEle: any = document.getElementsByClassName('dashboard-content')[0]\n  htmlEle.style.overflow = unScroll ? 'hidden' : 'auto'\n}\n/**\n *获取元素的兄弟元素\n */\nexport const getEleSiblings = (elm: any) => {\n  const siblings = []\n  const parentChildren = elm.parentNode.children\n  for (let i = 0, pl = parentChildren.length; i < pl; i++) {\n    if (parentChildren[i] !== elm) siblings.push(parentChildren[i])\n  }\n  return siblings\n}\n/**\n * 设置容器可滚动\n * @param {string} selector - 元素选择器\n */\nexport const overscroll = function (selector: string) {\n  const ele = document.querySelectorAll(selector)\n  ele.forEach((el: any) => {\n    el && el.addEventListener('touchstart', function () {\n      let top = el.scrollTop,\n        totalScroll = el.scrollHeight,\n        currentScroll = top + el.offsetHeight\n      if (top === 0) {\n        el.scrollTop = 1\n      } else if (currentScroll === totalScroll) {\n        el.scrollTop = top - 1\n      }\n    })\n    el && el.addEventListener('touchmove', function (evt: any) {\n      if (el.offsetHeight < el.scrollHeight) { evt._isScroller = true }\n    })\n  })\n}\n/**\n * 禁止元素touchmove事件\n */\nexport const preventEleTouch = (selector: any) => {\n  const preventEle = document.querySelector(selector)\n  preventEle && preventEle.addEventListener('touchmove', function (evt: any) {\n    if (!evt._isScroller) {\n      evt.preventDefault()\n    }\n  }, { passive: false })\n}\n/**\n * 复制文字\n * @param {any} ele - 元素\n */\nexport const copyText = (ele: any) => {\n  const range = document.createRange()\n  range.selectNode(ele)\n  const selection = window.getSelection()\n  selection.rangeCount > 0 && selection.removeAllRanges() // 清除之前的复制内容\n  selection.addRange(range)\n  document.execCommand('copy')\n  selection.removeAllRanges() // 清除选中状态\n}\n","import React, { PureComponent } from 'react'\nimport { withRouter, RouteComponentProps } from 'react-router-dom'\ninterface IState {\n  top: number | string;\n}\nconst screenHeight = window.document.body.offsetHeight\nclass Back extends PureComponent<RouteComponentProps> {\n  readonly state: IState = {\n    top: '80%'\n  }\n  goBack = () => {\n    const { location, history } = this.props\n    const { pathname, search } = location\n    if (pathname === '/user') { // 订单列表页返回到个人中心\n      history.replace('/user')\n    } else if (history.length === 1) {\n      // 找不到上一个页面时默认回到首页\n      history.push('/home')\n    } else {\n      history.goBack()\n    }\n  }\n  private startY: number;\n  private endY: number;\n  onTouchStart = (e: any) => {\n    this.startY = e.changedTouches[0].clientY\n  }\n  onTouchMove = (e: any) => {\n    let touchY = e.changedTouches[0].clientY\n    if (touchY <= 28) {\n      touchY = 28\n    } else if (touchY >= screenHeight - 70) {\n      touchY = screenHeight - 70\n    }\n    this.setState({\n      top: touchY\n    })\n  }\n  render () {\n    const { top } = this.state\n    return (\n      <div\n        className='back-btn'\n        onClick={this.goBack}\n        onTouchMove={this.onTouchMove}\n        style={{ top }}\n      >\n        <i\n          className='iconfont icon-fenleix'\n        />\n      </div>\n    )\n  }\n}\n\nexport default withRouter(Back)\n","/**\n * 示例 拷贝\n */\nimport React, { Component } from 'react'\nimport { Toast } from 'antd-mobile'\nimport { copyText } from '@utils/utils'\n\n// interface\ninterface IProps{\n  value: string;\n  toastInfo?: string;\n  className?: string;\n  width?: string;\n  height?: string;\n  icon?: boolean;\n  handleClick?: () => void;\n}\ninterface IState {\n  textHeight: string;\n}\n\nclass CopyText extends Component<IProps, IState> {\n  private textContent: any;\n  readonly state = {\n    textHeight: ''\n  }\n  copyText = (toastInfo: string) => {\n    copyText(this.textContent)\n    Toast.info(toastInfo, 1, null, false)\n  }\n  render () {\n    const { value, toastInfo, className, width = '100%', height = 'auto', icon = true } = this.props\n    return (\n      <div\n        className={`copy-container ${className || ''}`}\n        onClick={() => this.copyText(toastInfo)}\n        style={{ width, height }}\n      >\n        <p\n          ref={(node) => { this.textContent = node }}\n        >{value}</p>\n        {\n          icon ? <i className='iconfont icon-fuzhi' /> : null\n        }\n      </div>\n    )\n  }\n}\n\nexport default CopyText\n","import React, { Component } from 'react'\nimport { RouteComponentProps, withRouter } from 'react-router-dom'\nclass ScrollToTop extends Component<RouteComponentProps> {\n  componentDidUpdate (prevProps: RouteComponentProps) {\n    if (this.props.location.pathname !== prevProps.location.pathname) {\n      window.scrollTo(0, 0)\n      document.querySelector('.dashboard-content') && (document.querySelector('.dashboard-content').scrollTo(0, 0))\n    }\n  }\n  render (): any {\n    return null\n  }\n}\n\nexport default withRouter(ScrollToTop)\n","import React, { Component, Suspense } from 'react'\nimport { Route, RouteComponentProps } from 'react-router-dom'\nimport CacheRoute, { CacheSwitch } from 'react-router-cache-route'\nimport { connect } from 'react-redux'\nimport { bindActionCreators, Dispatch } from 'redux'\nimport NavLinkBar from '@cps/dashBoard/NavlinkBar'\nimport { Back } from '@common-cps'\nconst Home = React.lazy(() => import('@cps/Home'))\nconst News = React.lazy(() => import('@cps/News'))\nconst User = React.lazy(() => import('@cps/User'))\n\ninterface IProps {\n}\nclass Dashboard extends Component<IProps & RouteComponentProps> {\n  constructor (props: IProps & RouteComponentProps) {\n    super(props)\n    // 监听页面的跳转\n  }\n  private navList = [\n    {\n      path: '/home',\n      text: '首页',\n      icon: 'shouye',\n      title: '首页',\n      component: Home,\n      isCache: true\n    },\n    {\n      path: '/news',\n      text: '新闻',\n      icon: 'gouwuche',\n      title: '购物车',\n      component: News,\n      isCache: false\n    },\n    {\n      path: '/user',\n      text: '我的',\n      icon: 'gerenzhongxin',\n      title: '个人中心',\n      component: User,\n      isCache: true\n    }\n  ]\n\n  componentDidMount () {\n  }\n\n  componentDidUpdate () {\n  }\n\n  render () {\n    const { match, location } = this.props\n    const { pathname } = location\n    const isTab = this.navList.find((nav) => {\n      return match.path === '/' && pathname === '/' || pathname === nav.path\n    })\n    // 无返回按钮的页面路径\n    const noBackMap = ['/result']\n    const isNoBack = noBackMap.some((item) => {\n      return pathname.includes(item)\n    })\n    // 是否在调试模式\n    return (\n      <div className='dashboard scroll'\n        // onScroll={this.onScroll}\n      >\n        <Suspense fallback={null}>\n          <CacheSwitch>\n            {this.navList.map(nav => {\n              return (\n                nav.isCache ? (\n                  <CacheRoute\n                    className='dashboard-content scroll'\n                    key={nav.path}\n                    path={nav.path}\n                    render={(props: any) => (\n                      <nav.component {...props} />\n                    )}\n                  ></CacheRoute>\n                ) : (\n                  <Route\n                    className='dashboard-content scroll'\n                    key={nav.path}\n                    path={nav.path}\n                    render={(props: any) => (\n                      <nav.component {...props} />\n                    )}\n                  ></Route>\n                )\n              )\n            }\n            )}\n          </CacheSwitch>\n        </Suspense>\n        {/* 底部tab */}\n        {\n          isTab && <NavLinkBar navList={this.navList}></NavLinkBar>\n        }\n        {/* 返回按钮 */}\n        {\n          !isTab && !isNoBack && <Back />\n        }\n      </div>\n    )\n  }\n}\n\n// connect\nconst mapStateToProps = (state: any) => {\n  return {\n  }\n}\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return {\n    actions: bindActionCreators({}, dispatch)\n  }\n}\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Dashboard)\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport thunk from 'redux-thunk'\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom'\nimport * as serviceWorker from './serviceWorker'\nimport ENV from '@env'\nimport Config from '@common/config'\nimport rootReducer from '@redux/rootReducer'\nimport Dashboard from '@cps/dashBoard/Dashboard'\nimport { ScrollToTop } from '@common-cps'\nimport '@css/index.scss'\n\n// 全局接口\nwindow.ENV = ENV\n// 全局配置\nwindow.Config = Config\n\nconst isDebug = location.href.includes('isDebug=true')\n// vConsole插件的使用，动态引入\nif (ENV.env === 'dev' || isDebug) {\n  const ua = navigator.platform.toLowerCase()\n  const VConsole = require('vconsole');\n  (!ua.includes('win') && !ua.includes('mac') || isDebug) && new VConsole()\n}\n// 全局window属性\ndeclare global {\n  interface Window {\n    __REDUX_DEVTOOLS_EXTENSION__: Function;\n    ENV: any;\n    Config: any;\n    __wxjs_environment: any;\n    WeixinJSBridge: any;\n    wx: any;\n  }\n}\n// redux store配置\nconst store = process.env.NODE_ENV === 'production' ? (\n  createStore(rootReducer, applyMiddleware(thunk))\n) : (\n  window.__REDUX_DEVTOOLS_EXTENSION__ ? (\n    createStore(rootReducer, compose(applyMiddleware(thunk), window.__REDUX_DEVTOOLS_EXTENSION__()))\n  ) : (\n    createStore(rootReducer, applyMiddleware(thunk))\n  )\n)\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n      <ScrollToTop />\n      <Switch>\n        <Route component={Dashboard} />\n      </Switch>\n    </Router>\n  </Provider>\n  ,\n  document.getElementById('root')\n)\nserviceWorker.unregister()\n"],"sourceRoot":""}